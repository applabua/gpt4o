# coding=utf-8
import logging
import re
import time
from datetime import datetime
from telegram import Update, BotCommand, MenuButtonCommands
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import openai

# ‚Äî‚Äî‚Äî –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚Äî‚Äî‚Äî
BOT_TOKEN         = "7543432497:AAG5DI2jssDxX25oKofN3QBUcVpelS94on4"
OPENAI_API_KEY    = "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"
ADMIN_ID          = 2045410830
CHANNEL_LINK      = "https://t.me/applab_ua"
WELCOME_IMAGE_URL = "https://i.ibb.co/FLkjGL5X/IMG-0285.png"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI API –∫–ª—é—á–∞
openai.api_key = OPENAI_API_KEY

# ‚Äî‚Äî‚Äî –õ–æ–≥—É–≤–∞–Ω–Ω—è ‚Äî‚Äî‚Äî
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –∞–¥–º—ñ–Ω–∞
request_history = []

# –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT-4o
SYSTEM_PROMPT = (
    "You are an AI assistant developed by AppLab, with access to the latest world knowledge, "
    "including real-time news, Wikipedia, and all public internet sources. It is now {date}. "
    "Answer queries accurately, translate between any languages, generate professional images, "
    "and edit photos per user instructions."
)

# –ü–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è –æ–ø–∏—Å—É —Å–µ–±–µ
SELF_PATTERNS = [
    r"–æ–ø–∏—à–∏ —Å–µ–±—è", r"–æ —Ç–µ–±–µ", r"—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", r"–∫—Ç–æ —Ç—ã",
    r"describe yourself", r"tell me about yourself"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é —è–∫ —î–¥–∏–Ω–∏–π –ø–æ—Å—Ç"""
    user = update.effective_user
    name = user.username or user.full_name

    # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üîî –ë–æ—Ç –≤—ñ–¥–∫—Ä–∏–≤—Å—è: @{name} (id: {user.id})"
    )

    # –í—ñ—Ç–∞–ª—å–Ω–∏–π –ø–æ—Å—Ç: —Ñ–æ—Ç–æ + –ø—ñ–¥–ø–∏—Å –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
    greeting = (
        "*üëã –ü—Ä–∏–≤—ñ—Ç!*\n"
        f"–Ø ‚Äî —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –≤—ñ–¥ [AppLab]({CHANNEL_LINK}) ü§ñ\n\n"
        "*‚úçÔ∏è –°—Ç–≤–æ—Ä—é—é —Ç–∞ —Ä–µ–¥–∞–≥—É—é —Ç–µ–∫—Å—Ç–∏*\n"
        "*üåç –ü–µ—Ä–µ–∫–ª–∞–¥–∞—é –±—É–¥—å-—è–∫–æ—é –º–æ–≤–æ—é —Å–≤—ñ—Ç—É*\n"
        "*üé® –ì–µ–Ω–µ—Ä—É—é –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è*\n"
        "*üíª –ü–∏—à—É —Ç–∞ –ø–æ—è—Å–Ω—é—é –∫–æ–¥*\n\n"
        "üì© –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –∑–∞–ø–∏—Ç —É —á–∞—Ç—ñ ‚Äî —ñ —è –≤—Å–µ –∑—Ä–æ–±–ª—é!"
    )

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–¥–Ω–∏–º reply_photo –∑ caption
    try:
        await update.message.reply_photo(photo=WELCOME_IMAGE_URL, caption=greeting, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ—Ç–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        await update.message.reply_text(greeting, parse_mode=ParseMode.MARKDOWN)

    # –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–±–∞—á–∏–≤ —Å—Ç–∞—Ä—Ç
    context.user_data['started'] = True

async def gpt4o(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ —á–µ—Ä–µ–∑ GPT-4o –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –¥–∞—Ç–æ—é"""
    prompt = update.message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–∏—Ç –ø—Ä–æ –±–æ—Ç–∞
    for pat in SELF_PATTERNS:
        if re.search(pat, prompt, re.IGNORECASE):
            desc = (
                "–Ø ‚Äî —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –≤—ñ–¥ AppLab, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∫–æ–º–ø–∞–Ω—ñ—î—é AppLab. "
                "–ú–µ–Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫ –∫–æ–º–ø–∞–Ω—ñ—ó AppLab Evgeniy Kolokolov. "
                f"–î–µ—Ç–∞–ª—ñ –∑–∞ [—Å—Å–∏–ª–∫–æ—é]({CHANNEL_LINK})."
            )
            return await update.message.reply_text(desc, parse_mode=ParseMode.MARKDOWN)

    # –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è –∞–¥–º—ñ–Ω–∞
    user = update.effective_user
    uname = user.username or user.full_name
    request_history.append(
        f"<a href='tg://user?id={user.id}'>@{uname}</a> -> GPT-4o: {prompt}"
    )

    # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä—É
    await update.message.chat.send_action('typing')

    # –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞
    today = datetime.now().strftime('%Y-%m-%d')
    system_msg = {'role':'system', 'content': SYSTEM_PROMPT.format(date=today)}

    # –Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—É
    chat_hist = context.chat_data.setdefault('history', [])
    chat_hist.append({'role':'user','content':prompt})

    messages = [system_msg] + chat_hist[-20:]

    try:
        resp = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.5,
            max_tokens=1500
        )
        out = resp.choices[0].message.content.strip()
        chat_hist.append({'role':'assistant','content':out})
        await update.message.reply_text(out)
    except Exception as e:
        logger.error(f"GPT-4o error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ OpenAI. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

async def image_gen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å —á–µ—Ä–µ–∑ DALL¬∑E 3 –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏"""
    prompt = update.message.text.strip()
    user = update.effective_user
    uname = user.username or user.full_name
    request_history.append(f"<a href='tg://user?id={user.id}'>@{uname}</a> -> Image: {prompt}")

    full_prompt = f"High-resolution professional image, realistic style, 4k: {prompt}"
    for _ in range(3):
        await update.message.chat.send_action('upload_photo')
        try:
            resp = openai.Image.create(
                prompt=full_prompt,
                n=1,
                size="1024x1024",
                model="dall-e-3"
            )
            url = resp['data'][0]['url']
            return await update.message.reply_photo(photo=url, caption=f"üé® {prompt}")
        except Exception as e:
            logger.warning(f"Image attempt failed: {e}")
            time.sleep(1)
    await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø—ñ—Å–ª—è –∫—ñ–ª—å–∫–æ—Ö —Å–ø—Ä–æ–±.")

async def edit_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ DALL¬∑E 3 –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏"""
    if not update.message.reply_to_message or not update.message.reply_to_message.photo:
        return await update.message.reply_text("‚ö†Ô∏è –©–æ–± —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ —Ç–∞ –Ω–∞–ø–∏—à—ñ—Ç—å '/edit <–æ–ø–∏—Å>'")

    prompt = update.message.text.partition(' ')[2].strip()
    user = update.effective_user
    uname = user.username or user.full_name
    request_history.append(f"<a href='tg://user?id={user.id}'>@{uname}</a> -> Edit Image: {prompt}")

    full_prompt = f"Professional photo editing, enhanced: {prompt}"
    photo = update.message.reply_to_message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    path = f"/mnt/data/{photo.file_id}.png"
    await file.download_to_drive(path)

    for _ in range(3):
        await update.message.chat.send_action('upload_photo')
        try:
            resp = openai.Image.create_edit(
                image=open(path,'rb'),
                mask=None,
                prompt=full_prompt,
                n=1,
                size="1024x1024",
                model="dall-e-3"
            )
            url = resp['data'][0]['url']
            return await update.message.reply_photo(photo=url, caption=f"‚úèÔ∏è {prompt}")
        except Exception as e:
            logger.warning(f"Edit attempt failed: {e}")
            time.sleep(1)
    await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –ø—ñ—Å–ª—è –∫—ñ–ª—å–∫–æ—Ö —Å–ø—Ä–æ–±.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text or ""
    if re.search(r"\b(–Ω–∞—Ä–∏—Å—É–π|—Ä–∏—Å—É–π|draw|paint|create|generate)\b", text, re.IGNORECASE):
        return await image_gen(update, context)
    if text.lower().startswith('/edit'):
        return await edit_image(update, context)
    return await gpt4o(update, context)

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –∑–∞–ø–∏—Ç –∞–±–æ '/edit' —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ñ–æ—Ç–æ.")

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º—ñ–Ω—Å—å–∫–∞ –∫–æ–º–∞–Ω–¥–∞ (–Ω–µ –≤ –º–µ–Ω—é)"""
    if update.effective_user.id != ADMIN_ID:
        return
    if not request_history:
        return await update.message.reply_text("üì≠ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
    await update.message.reply_text(
        "üìú –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç–∏:\n" + "\n".join(request_history[-20:]),
        parse_mode=ParseMode.HTML
    )

async def post_init(app):
    await app.bot.set_chat_menu_button(menu_button=MenuButtonCommands())
    await app.bot.set_my_commands([BotCommand("start","üöÄ –°—Ç–∞—Ä—Ç")])

def main():
    app = (ApplicationBuilder()
           .token(BOT_TOKEN)
           .post_init(post_init)
           .build()
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("edit", edit_image))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))
    app.run_polling()

if __name__ == '__main__':
    main()
